{
    "command_name": "pull",
    "description": "Fetch from and integrate with another repository or a local branch",
    "options": [
        {
            "argument": "--quiet",
            "arguments": "-q, --quiet",
            "description": "This is passed to both underlying git-fetch to squelch reporting of during transfer, and underlying git-merge to squelch output during merging."
        },
        {
            "argument": "--verbose",
            "arguments": "-v, --verbose",
            "description": "Pass --verbose to git-fetch and git-merge."
        },
        {
            "argument": "--recurse-submodules[=(yes|on-demand|no)]",
            "arguments": "--recurse-submodules[=(yes|on-demand|no)]",
            "description": "This option controls if new commits of populated submodules should be fetched, and if the working trees of active submodules should be updated."
        },
        {
            "argument": "--no-recurse-submodules",
            "arguments": "--no-recurse-submodules",
            "description": "Disable recursive fetching of submodules."
        },
        {
            "argument": "--commit",
            "arguments": "--commit",
            "description": "Perform the merge and commit the result. This option can be used to override --no-commit. Only useful when merging."
        },
        {
            "argument": "--no-commit",
            "arguments": "--no-commit",
            "description": "Perform the merge and stop just before creating a merge commit, to give the user a chance to inspect and further tweak the merge result before committing. Note that fast-forward updates do not create a merge commit and therefore there is no way to stop those merges with --no-commit. Thus, if you want to ensure your branch is not changed or updated by the merge command, use --no-ff with --no-commit."
        },
        {
            "argument": "--edit",
            "arguments": "-e, --edit",
            "description": "Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge."
        },
        {
            "argument": "--no-edit",
            "arguments": "--no-edit",
            "description": "Accept the auto-generated merge message without invoking an editor. This is generally discouraged."
        },
        {
            "argument": "--cleanup=<mode>",
            "arguments": "--cleanup=<mode>",
            "description": "This option determines how the merge message will be cleaned up before committing. See git-commit[1] for more details. In addition, if the <mode> is given a value of scissors, scissors will be appended to MERGE_MSG before being passed on to the commit machinery in the case of a merge conflict."
        },
        {
            "argument": "--ff-only",
            "arguments": "--ff-only",
            "description": "Only update to the new history if there is no divergent local history. This is the default when no method for reconciling divergent histories is provided (via the --rebase=* flags)."
        },
        {
            "argument": "--ff",
            "arguments": "--ff",
            "description": "When merging rather than rebasing, specifies how a merge is handled when the merged-in history is already a descendant of the current history. With --ff, when possible resolve the merge as a fast-forward (only update the branch pointer to match the merged branch; do not create a merge commit). When not possible (when the merged-in history is not a descendant of the current history), create a merge commit."
        },
        {
            "argument": "--no-ff",
            "arguments": "--no-ff",
            "description": "Create a merge commit in all cases, even when the merge could instead be resolved as a fast-forward."
        },
        {
            "argument": "--gpg-sign[=<keyid>]",
            "arguments": "-S[<keyid>], --gpg-sign[=<keyid>]",
            "description": "GPG-sign the resulting merge commit. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space."
        },
        {
            "argument": "--no-gpg-sign",
            "arguments": "--no-gpg-sign",
            "description": "Do not GPG-sign the resulting merge commit. Useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
        },
        {
            "argument": "--log[=<n>]",
            "arguments": "--log[=<n>]",
            "description": "In addition to branch names, populate the log message with at most <n> actual commits that are being merged. See also git-fmt-merge-msg[1]. Only useful when merging."
        },
        {
            "argument": "--no-log",
            "arguments": "--no-log",
            "description": "Do not list one-line descriptions from the actual commits being merged. Only useful when merging."
        },
        {
            "argument": "--signoff",
            "arguments": "--signoff",
            "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project. Consult the documentation or leadership of the project to understand how signoffs are used."
        },
        {
            "argument": "--no-signoff",
            "arguments": "--no-signoff",
            "description": "Countermand an earlier --signoff option on the command line."
        },
        {
            "argument": "--stat",
            "arguments": "--stat",
            "description": "Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat."
        },
        {
            "argument": "--no-stat",
            "arguments": "-n, --no-stat",
            "description": "Do not show a diffstat at the end of the merge."
        },
        {
            "argument": "--squash",
            "arguments": "--squash",
            "description": "Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD. This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch. With --squash, --commit is not allowed, and will fail. Only useful when merging."
        },
        {
            "argument": "--no-squash",
            "arguments": "--no-squash",
            "description": "Perform the merge and commit the result. This option can be used to override --squash."
        },
        {
            "argument": "--verify",
            "arguments": "--verify",
            "description": "Run the pre-merge and commit-msg hooks. This is the default. Only useful when merging."
        },
        {
            "argument": "--no-verify",
            "arguments": "--no-verify",
            "description": "Bypass the pre-merge and commit-msg hooks. See also githooks[5]. Only useful when merging."
        },
        {
            "argument": "--strategy=<strategy>",
            "arguments": "-s <strategy>, --strategy=<strategy>",
            "description": "Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no -s option, a built-in list of strategies is used instead."
        },
        {
            "argument": "--strategy-option=<option>",
            "arguments": "-X <option>, --strategy-option=<option>",
            "description": "Pass merge strategy specific option through to the merge strategy."
        },
        {
            "argument": "--verify-signatures",
            "arguments": "--verify-signatures",
            "description": "Verify that the GPG signature of the fetched objects is valid."
        },
        {
            "argument": "--no-verify-signatures",
            "arguments": "--no-verify-signatures",
            "description": "Do not verify the GPG signature of the fetched objects."
        },
        {
            "argument": "--autostash",
            "arguments": "--autostash",
            "description": "Automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run rebase on a dirty worktree. However, use with care: the final stash application after a successful rebase might result in non-trivial conflicts."
        },
        {
            "argument": "--no-autostash",
            "arguments": "--no-autostash",
            "description": "Disable the --autostash option."
        },
        {
            "argument": "--allow-unrelated-histories",
            "arguments": "--allow-unrelated-histories",
            "description": "This option can be used to override this safety when merging histories of two projects that started their lives independently. Only useful when merging."
        },
        {
            "argument": "--rebase[=false|true|merges|interactive]",
            "arguments": "-r, --rebase[=false|true|merges|interactive]",
            "description": "When true, rebase the current branch on top of the upstream branch after fetching. If there is a remote-tracking branch corresponding to the upstream branch and the upstream branch was rebased since last fetched, the rebase uses that information to avoid rebasing non-local changes. When set to merges, rebase using the --rebase-merges option. When false, merge the current branch into the upstream branch."
        },
        {
            "argument": "--no-rebase",
            "arguments": "--no-rebase",
            "description": "This is shorthand for --rebase=false."
        },
        {
            "argument": "--all",
            "arguments": "--all",
            "description": "Fetch all remotes."
        },
        {
            "argument": "--no-all",
            "arguments": "--no-all",
            "description": "Override the configuration variable fetch.all, which when set to true fetches all remotes."
        },
        {
            "argument": "--append",
            "arguments": "-a, --append",
            "description": "Append ref names and object names of fetched refs to the existing contents of .git/FETCH_HEAD. Without this option old data in .git/FETCH_HEAD will be overwritten."
        },
        {
            "argument": "--atomic",
            "arguments": "--atomic",
            "description": "Use an atomic transaction to update local refs. Either all refs are updated, or on error, no refs are updated."
        },
        {
            "argument": "--depth=<depth>",
            "arguments": "--depth=<depth>",
            "description": "Limit fetching to the specified number of commits from the tip of each remote branch history. If fetching to a shallow repository created by git clone with --depth=<depth> option (see git-clone[1]), deepen or shorten the history to the specified number of commits."
        },
        {
            "argument": "--deepen=<depth>",
            "arguments": "--deepen=<depth>",
            "description": "Similar to --depth, except it specifies the number of commits from the current shallow boundary instead of from the tip of each remote branch history."
        },
        {
            "argument": "--shallow-since=<date>",
            "arguments": "--shallow-since=<date>",
            "description": "Deepen or shorten the history of a shallow repository to include all reachable commits after <date>."
        },
        {
            "argument": "--shallow-exclude=<revision>",
            "arguments": "--shallow-exclude=<revision>",
            "description": "Deepen or shorten the history of a shallow repository to exclude commits reachable from a specified remote branch or tag. This option can be specified multiple times."
        },
        {
            "argument": "--unshallow",
            "arguments": "--unshallow",
            "description": "If the source repository is complete, convert a shallow repository to a complete one, removing all the limitations imposed by shallow repositories."
        },
        {
            "argument": "--update-shallow",
            "arguments": "--update-shallow",
            "description": "By default when fetching from a shallow repository, git fetch refuses refs that require updating .git/shallow. This option updates .git/shallow and accept such refs."
        },
        {
            "argument": "--negotiation-tip=<commit|glob>",
            "arguments": "--negotiation-tip=<commit|glob>",
            "description": "By default, Git will report, to the server, refs reachable from all local branches and tags. This option allows you to specify a particular commit or glob pattern for commits that should be considered as tips for negotiation."
        },
        {
            "argument": "--negotiate-only",
            "arguments": "--negotiate-only",
            "description": "Do not fetch anything from the server, and instead print the ancestors of the provided --negotiation-tip=* arguments, which we have in common with the server."
        },
        {
            "argument": "--dry-run",
            "arguments": "--dry-run",
            "description": "Show what would be done, without making any changes."
        },
        {
            "argument": "--porcelain",
            "arguments": "--porcelain",
            "description": "Print the output to standard output in an easy-to-parse format for scripts."
        },
        {
            "argument": "--force",
            "arguments": "-f, --force",
            "description": "When git fetch is used with <rbranch>:<lbranch> refspec, it refuses to update the local branch <lbranch> unless the remote branch <rbranch> it fetches is a descendant of <lbranch>. This option overrides that check."
        },
        {
            "argument": "--keep",
            "arguments": "-k, --keep",
            "description": "Keep downloaded pack."
        },
        {
            "argument": "--prefetch",
            "arguments": "--prefetch",
            "description": "Modify the configured refspec to place all refs into the refs/prefetch/ namespace."
        },
        {
            "argument": "--prune",
            "arguments": "-p, --prune",
            "description": "Before fetching, remove any remote-tracking references that no longer exist on the remote."
        },
        {
            "argument": "--no-tags",
            "arguments": "--no-tags",
            "description": "By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally. This option disables this automatic tag following. The default behavior for a remote may be specified with the remote.<name>.tagOpt setting. See git-config[1]."
        },
        {
            "argument": "--refmap=<refspec>",
            "arguments": "--refmap=<refspec>",
            "description": "When fetching refs listed on the command line, use the specified refspec (can be given more than once) to map the refs to remote-tracking branches, instead of the values of remote.*.fetch configuration variables for the remote repository. Providing an empty <refspec> to the --refmap option causes Git to ignore the configured refmaps and rely entirely on the refspecs supplied as command-line arguments. See section on \"Configured Remote-tracking Branches\" for details."
        },
        {
            "argument": "--tags",
            "arguments": "-t, --tags",
            "description": "Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into local tags with the same name), in addition to whatever else would otherwise be fetched. Using this option alone does not subject tags to pruning, even if --prune is used (though tags may be pruned anyway if they are also the destination of a refspec explicitly mapped to them)."
        },
        {
            "argument": "--jobs=<n>",
            "arguments": "-j <n>, --jobs=<n>",
            "description": "Number of parallel children to be used for fetching submodules. Defaults to the submodule.fetchJobs option. If the option is not set, it defaults to 1."
        },
        {
            "argument": "--set-upstream",
            "arguments": "--set-upstream",
            "description": "If the remote is fetched successfully, add upstream (tracking) reference, used by argument-less git-pull[1] and other commands."
        },
        {
            "argument": "--upload-pack <upload-pack>",
            "arguments": "-u <upload-pack>, --upload-pack <upload-pack>",
            "description": "When given, and the repository to clone from is accessed via ssh, this specifies a non-default path for the command run on the other end."
        },
        {
            "argument": "--progress",
            "arguments": "--progress",
            "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal."
        },
        {
            "argument": "--server-option=<option>",
            "arguments": "-o <option>, --server-option=<option>",
            "description": "Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. When multiple are given, they are all sent in order."
        },
        {
            "argument": "--show-forced-updates",
            "arguments": "--show-forced-updates",
            "description": "By default, git fetch prints forced updates with a different preceding symbol than normal updates."
        },
        {
            "argument": "--no-show-forced-updates",
            "arguments": "--no-show-forced-updates",
            "description": "Do not print forced updates."
        },
        {
            "argument": "--ipv4",
            "arguments": "-4, --ipv4",
            "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
        },
        {
            "argument": "--ipv6",
            "arguments": "-6, --ipv6",
            "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
        },
        {
            "argument": "<repository>",
            "arguments": "<repository>",
            "description": "The \"remote\" repository that is the source of a fetch or pull operation."
        },
        {
            "argument": "<refspec>",
            "arguments": "<refspec>",
            "description": "Specifies which refs to fetch and which local refs to update."
        }
    ]
}
